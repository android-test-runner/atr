// Code generated by MockGen. DO NOT EDIT.
// Source: files/files.go

// Package mock_files is a generated GoMock package.
package mock_files

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFiles is a mock of Files interface
type MockFiles struct {
	ctrl     *gomock.Controller
	recorder *MockFilesMockRecorder
}

// MockFilesMockRecorder is the mock recorder for MockFiles
type MockFilesMockRecorder struct {
	mock *MockFiles
}

// NewMockFiles creates a new mock instance
func NewMockFiles(ctrl *gomock.Controller) *MockFiles {
	mock := &MockFiles{ctrl: ctrl}
	mock.recorder = &MockFilesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFiles) EXPECT() *MockFilesMockRecorder {
	return m.recorder
}

// CanAccess mocks base method
func (m *MockFiles) CanAccess(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanAccess", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanAccess indicates an expected call of CanAccess
func (mr *MockFilesMockRecorder) CanAccess(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanAccess", reflect.TypeOf((*MockFiles)(nil).CanAccess), path)
}

// ReadLines mocks base method
func (m *MockFiles) ReadLines(path string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLines", path)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLines indicates an expected call of ReadLines
func (mr *MockFilesMockRecorder) ReadLines(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLines", reflect.TypeOf((*MockFiles)(nil).ReadLines), path)
}

// WriteFile mocks base method
func (m *MockFiles) WriteFile(path, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", path, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile
func (mr *MockFilesMockRecorder) WriteFile(path, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockFiles)(nil).WriteFile), path, content)
}

// MakeDirectory mocks base method
func (m *MockFiles) MakeDirectory(directory string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeDirectory", directory)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeDirectory indicates an expected call of MakeDirectory
func (mr *MockFilesMockRecorder) MakeDirectory(directory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeDirectory", reflect.TypeOf((*MockFiles)(nil).MakeDirectory), directory)
}

// RemoveDirectory mocks base method
func (m *MockFiles) RemoveDirectory(directory string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDirectory", directory)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDirectory indicates an expected call of RemoveDirectory
func (mr *MockFilesMockRecorder) RemoveDirectory(directory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDirectory", reflect.TypeOf((*MockFiles)(nil).RemoveDirectory), directory)
}
