// Code generated by MockGen. DO NOT EDIT.
// Source: command/executor.go

// Package mock_command is a generated GoMock package.
package mock_command

import (
	gomock "github.com/golang/mock/gomock"
	command "github.com/ybonjour/atr/command"
	exec "os/exec"
	reflect "reflect"
)

// MockExecutor is a mock of Executor interface
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// ExecuteResult mocks base method
func (m *MockExecutor) ExecuteResult(cmd *exec.Cmd) command.ExecutionResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteResult", cmd)
	ret0, _ := ret[0].(command.ExecutionResult)
	return ret0
}

// ExecuteResult indicates an expected call of ExecuteResult
func (mr *MockExecutorMockRecorder) ExecuteResult(cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteResult", reflect.TypeOf((*MockExecutor)(nil).ExecuteResult), cmd)
}

// ExecuteOutput mocks base method
func (m *MockExecutor) ExecuteOutput(cmd *exec.Cmd) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteOutput", cmd)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteOutput indicates an expected call of ExecuteOutput
func (mr *MockExecutorMockRecorder) ExecuteOutput(cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteOutput", reflect.TypeOf((*MockExecutor)(nil).ExecuteOutput), cmd)
}

// ExecuteInBackground mocks base method
func (m *MockExecutor) ExecuteInBackground(cmd *exec.Cmd) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteInBackground", cmd)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteInBackground indicates an expected call of ExecuteInBackground
func (mr *MockExecutorMockRecorder) ExecuteInBackground(cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteInBackground", reflect.TypeOf((*MockExecutor)(nil).ExecuteInBackground), cmd)
}
