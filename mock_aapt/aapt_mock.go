// Code generated by MockGen. DO NOT EDIT.
// Source: aapt/aapt.go

// Package mock_aapt is a generated GoMock package.
package mock_aapt

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAapt is a mock of Aapt interface
type MockAapt struct {
	ctrl     *gomock.Controller
	recorder *MockAaptMockRecorder
}

// MockAaptMockRecorder is the mock recorder for MockAapt
type MockAaptMockRecorder struct {
	mock *MockAapt
}

// NewMockAapt creates a new mock instance
func NewMockAapt(ctrl *gomock.Controller) *MockAapt {
	mock := &MockAapt{ctrl: ctrl}
	mock.recorder = &MockAaptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAapt) EXPECT() *MockAaptMockRecorder {
	return m.recorder
}

// Version mocks base method
func (m *MockAapt) Version() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version
func (mr *MockAaptMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockAapt)(nil).Version))
}

// PackageName mocks base method
func (m *MockAapt) PackageName(apkPath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackageName", apkPath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PackageName indicates an expected call of PackageName
func (mr *MockAaptMockRecorder) PackageName(apkPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackageName", reflect.TypeOf((*MockAapt)(nil).PackageName), apkPath)
}

// TestRunner mocks base method
func (m *MockAapt) TestRunner(apkPath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestRunner", apkPath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestRunner indicates an expected call of TestRunner
func (mr *MockAaptMockRecorder) TestRunner(apkPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestRunner", reflect.TypeOf((*MockAapt)(nil).TestRunner), apkPath)
}
