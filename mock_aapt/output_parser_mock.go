// Code generated by MockGen. DO NOT EDIT.
// Source: aapt/output_parser.go

// Package mock_aapt is a generated GoMock package.
package mock_aapt

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockoutputParser is a mock of outputParser interface
type MockoutputParser struct {
	ctrl     *gomock.Controller
	recorder *MockoutputParserMockRecorder
}

// MockoutputParserMockRecorder is the mock recorder for MockoutputParser
type MockoutputParserMockRecorder struct {
	mock *MockoutputParser
}

// NewMockoutputParser creates a new mock instance
func NewMockoutputParser(ctrl *gomock.Controller) *MockoutputParser {
	mock := &MockoutputParser{ctrl: ctrl}
	mock.recorder = &MockoutputParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockoutputParser) EXPECT() *MockoutputParserMockRecorder {
	return m.recorder
}

// ParseVersion mocks base method
func (m *MockoutputParser) ParseVersion(out string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseVersion", out)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseVersion indicates an expected call of ParseVersion
func (mr *MockoutputParserMockRecorder) ParseVersion(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseVersion", reflect.TypeOf((*MockoutputParser)(nil).ParseVersion), out)
}

// ParsePackageName mocks base method
func (m *MockoutputParser) ParsePackageName(out string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParsePackageName", out)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParsePackageName indicates an expected call of ParsePackageName
func (mr *MockoutputParserMockRecorder) ParsePackageName(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParsePackageName", reflect.TypeOf((*MockoutputParser)(nil).ParsePackageName), out)
}

// ParseTestRunner mocks base method
func (m *MockoutputParser) ParseTestRunner(out string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseTestRunner", out)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTestRunner indicates an expected call of ParseTestRunner
func (mr *MockoutputParserMockRecorder) ParseTestRunner(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTestRunner", reflect.TypeOf((*MockoutputParser)(nil).ParseTestRunner), out)
}
