// Code generated by MockGen. DO NOT EDIT.
// Source: output/writer.go

// Package mock_output is a generated GoMock package.
package mock_output

import (
	devices "github.com/android-test-runner/atr/devices"
	files "github.com/android-test-runner/atr/files"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWriter is a mock of Writer interface
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// WriteFile mocks base method
func (m *MockWriter) WriteFile(file files.File, device devices.Device) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", file, device)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteFile indicates an expected call of WriteFile
func (mr *MockWriterMockRecorder) WriteFile(file, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockWriter)(nil).WriteFile), file, device)
}

// WriteFileToRoot mocks base method
func (m *MockWriter) WriteFileToRoot(file files.File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFileToRoot", file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteFileToRoot indicates an expected call of WriteFileToRoot
func (mr *MockWriterMockRecorder) WriteFileToRoot(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFileToRoot", reflect.TypeOf((*MockWriter)(nil).WriteFileToRoot), file)
}

// RemoveDeviceDirectory mocks base method
func (m *MockWriter) RemoveDeviceDirectory(device devices.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDeviceDirectory", device)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDeviceDirectory indicates an expected call of RemoveDeviceDirectory
func (mr *MockWriterMockRecorder) RemoveDeviceDirectory(device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDeviceDirectory", reflect.TypeOf((*MockWriter)(nil).RemoveDeviceDirectory), device)
}

// MakeDeviceDirectory mocks base method
func (m *MockWriter) MakeDeviceDirectory(device devices.Device) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeDeviceDirectory", device)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeDeviceDirectory indicates an expected call of MakeDeviceDirectory
func (mr *MockWriterMockRecorder) MakeDeviceDirectory(device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeDeviceDirectory", reflect.TypeOf((*MockWriter)(nil).MakeDeviceDirectory), device)
}

// ToAbsolute mocks base method
func (m *MockWriter) ToAbsolute(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToAbsolute", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// ToAbsolute indicates an expected call of ToAbsolute
func (mr *MockWriterMockRecorder) ToAbsolute(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToAbsolute", reflect.TypeOf((*MockWriter)(nil).ToAbsolute), path)
}
