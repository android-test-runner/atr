// Code generated by MockGen. DO NOT EDIT.
// Source: result/parser.go

// Package mock_result is a generated GoMock package.
package mock_result

import (
	result "github.com/android-test-runner/atr/result"
	test "github.com/android-test-runner/atr/test"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockParser is a mock of Parser interface
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// ParseFromOutput mocks base method
func (m *MockParser) ParseFromOutput(test test.Test, err error, output string, duration time.Duration) result.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseFromOutput", test, err, output, duration)
	ret0, _ := ret[0].(result.Result)
	return ret0
}

// ParseFromOutput indicates an expected call of ParseFromOutput
func (mr *MockParserMockRecorder) ParseFromOutput(test, err, output, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseFromOutput", reflect.TypeOf((*MockParser)(nil).ParseFromOutput), test, err, output, duration)
}
