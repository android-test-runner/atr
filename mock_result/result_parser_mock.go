// Code generated by MockGen. DO NOT EDIT.
// Source: result/result_parser.go

// Package mock_result is a generated GoMock package.
package mock_result

import (
	gomock "github.com/golang/mock/gomock"
	result "github.com/ybonjour/atr/result"
	test "github.com/ybonjour/atr/test"
	reflect "reflect"
)

// MockResultParser is a mock of ResultParser interface
type MockResultParser struct {
	ctrl     *gomock.Controller
	recorder *MockResultParserMockRecorder
}

// MockResultParserMockRecorder is the mock recorder for MockResultParser
type MockResultParserMockRecorder struct {
	mock *MockResultParser
}

// NewMockResultParser creates a new mock instance
func NewMockResultParser(ctrl *gomock.Controller) *MockResultParser {
	mock := &MockResultParser{ctrl: ctrl}
	mock.recorder = &MockResultParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResultParser) EXPECT() *MockResultParserMockRecorder {
	return m.recorder
}

// ParseFromOutput mocks base method
func (m *MockResultParser) ParseFromOutput(test test.Test, err error, output string) result.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseFromOutput", test, err, output)
	ret0, _ := ret[0].(result.Result)
	return ret0
}

// ParseFromOutput indicates an expected call of ParseFromOutput
func (mr *MockResultParserMockRecorder) ParseFromOutput(test, err, output interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseFromOutput", reflect.TypeOf((*MockResultParser)(nil).ParseFromOutput), test, err, output)
}
