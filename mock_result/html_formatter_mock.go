// Code generated by MockGen. DO NOT EDIT.
// Source: result/html_formatter.go

// Package mock_result is a generated GoMock package.
package mock_result

import (
	devices "github.com/android-test-runner/atr/devices"
	files "github.com/android-test-runner/atr/files"
	result "github.com/android-test-runner/atr/result"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHtmlFormatter is a mock of HtmlFormatter interface
type MockHtmlFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockHtmlFormatterMockRecorder
}

// MockHtmlFormatterMockRecorder is the mock recorder for MockHtmlFormatter
type MockHtmlFormatterMockRecorder struct {
	mock *MockHtmlFormatter
}

// NewMockHtmlFormatter creates a new mock instance
func NewMockHtmlFormatter(ctrl *gomock.Controller) *MockHtmlFormatter {
	mock := &MockHtmlFormatter{ctrl: ctrl}
	mock.recorder = &MockHtmlFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHtmlFormatter) EXPECT() *MockHtmlFormatterMockRecorder {
	return m.recorder
}

// FormatResults mocks base method
func (m *MockHtmlFormatter) FormatResults(arg0 map[devices.Device]result.TestResults) (files.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatResults", arg0)
	ret0, _ := ret[0].(files.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatResults indicates an expected call of FormatResults
func (mr *MockHtmlFormatterMockRecorder) FormatResults(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatResults", reflect.TypeOf((*MockHtmlFormatter)(nil).FormatResults), arg0)
}
