// Code generated by MockGen. DO NOT EDIT.
// Source: logcat/logcat.go

// Package mock_logcat is a generated GoMock package.
package mock_logcat

import (
	output "github.com/android-test-runner/atr/output"
	test "github.com/android-test-runner/atr/test"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLogcat is a mock of Logcat interface
type MockLogcat struct {
	ctrl     *gomock.Controller
	recorder *MockLogcatMockRecorder
}

// MockLogcatMockRecorder is the mock recorder for MockLogcat
type MockLogcatMockRecorder struct {
	mock *MockLogcat
}

// NewMockLogcat creates a new mock instance
func NewMockLogcat(ctrl *gomock.Controller) *MockLogcat {
	mock := &MockLogcat{ctrl: ctrl}
	mock.recorder = &MockLogcatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogcat) EXPECT() *MockLogcatMockRecorder {
	return m.recorder
}

// StartRecording mocks base method
func (m *MockLogcat) StartRecording(test test.Test) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRecording", test)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartRecording indicates an expected call of StartRecording
func (mr *MockLogcatMockRecorder) StartRecording(test interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRecording", reflect.TypeOf((*MockLogcat)(nil).StartRecording), test)
}

// StopRecording mocks base method
func (m *MockLogcat) StopRecording(test test.Test) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopRecording", test)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopRecording indicates an expected call of StopRecording
func (mr *MockLogcatMockRecorder) StopRecording(test interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopRecording", reflect.TypeOf((*MockLogcat)(nil).StopRecording), test)
}

// SaveRecording mocks base method
func (m *MockLogcat) SaveRecording(test test.Test, writer output.Writer) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRecording", test, writer)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveRecording indicates an expected call of SaveRecording
func (mr *MockLogcatMockRecorder) SaveRecording(test, writer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRecording", reflect.TypeOf((*MockLogcat)(nil).SaveRecording), test, writer)
}
