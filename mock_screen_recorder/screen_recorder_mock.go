// Code generated by MockGen. DO NOT EDIT.
// Source: screen_recorder/screen_recorder.go

// Package mock_screen_recorder is a generated GoMock package.
package mock_screen_recorder

import (
	gomock "github.com/golang/mock/gomock"
	devices "github.com/ybonjour/atr/devices"
	screen_recorder "github.com/ybonjour/atr/screen_recorder"
	test "github.com/ybonjour/atr/test"
	reflect "reflect"
)

// MockScreenRecorder is a mock of ScreenRecorder interface
type MockScreenRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockScreenRecorderMockRecorder
}

// MockScreenRecorderMockRecorder is the mock recorder for MockScreenRecorder
type MockScreenRecorderMockRecorder struct {
	mock *MockScreenRecorder
}

// NewMockScreenRecorder creates a new mock instance
func NewMockScreenRecorder(ctrl *gomock.Controller) *MockScreenRecorder {
	mock := &MockScreenRecorder{ctrl: ctrl}
	mock.recorder = &MockScreenRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScreenRecorder) EXPECT() *MockScreenRecorderMockRecorder {
	return m.recorder
}

// StartRecording mocks base method
func (m *MockScreenRecorder) StartRecording(test test.Test) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRecording", test)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartRecording indicates an expected call of StartRecording
func (mr *MockScreenRecorderMockRecorder) StartRecording(test interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRecording", reflect.TypeOf((*MockScreenRecorder)(nil).StartRecording), test)
}

// StopRecording mocks base method
func (m *MockScreenRecorder) StopRecording(test test.Test) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopRecording", test)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopRecording indicates an expected call of StopRecording
func (mr *MockScreenRecorderMockRecorder) StopRecording(test interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopRecording", reflect.TypeOf((*MockScreenRecorder)(nil).StopRecording), test)
}

// MockFactory is a mock of Factory interface
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// ForDevice mocks base method
func (m *MockFactory) ForDevice(device devices.Device) screen_recorder.ScreenRecorder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForDevice", device)
	ret0, _ := ret[0].(screen_recorder.ScreenRecorder)
	return ret0
}

// ForDevice indicates an expected call of ForDevice
func (mr *MockFactoryMockRecorder) ForDevice(device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForDevice", reflect.TypeOf((*MockFactory)(nil).ForDevice), device)
}
